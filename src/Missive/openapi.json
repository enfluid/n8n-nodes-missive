{
  "openapi": "3.0.0",
  "info": {
    "title": "Missive API",
    "description": "The Missive API lets you enrich Missive conversations with content from anywhere on the web. You can also automate tasks such as creating and sending drafts, syncing contacts and more.",
    "version": "1.0.0",
    "contact": {
      "name": "Missive Support",
      "url": "https://missiveapp.com/help"
    }
  },
  "servers": [
    {
      "url": "https://public.missiveapp.com/v1",
      "description": "Missive API Production Server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "API token obtained from Missive preferences"
      }
    },
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          }
        }
      },
      "Contact": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the contact"
          },
          "contact_book_id": {
            "type": "string",
            "description": "ID of the contact book"
          },
          "name": {
            "type": "string",
            "description": "Name of the contact"
          },
          "emails": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Email addresses associated with the contact"
          },
          "phones": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Phone numbers associated with the contact"
          },
          "websites": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Websites associated with the contact"
          },
          "company": {
            "type": "string",
            "description": "Company name of the contact"
          },
          "birthday": {
            "type": "string",
            "format": "date",
            "description": "Birthday of the contact"
          },
          "description": {
            "type": "string",
            "description": "Description of the contact"
          },
          "infos": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "label": {
                  "type": "string",
                  "description": "Label for the information"
                },
                "value": {
                  "type": "string",
                  "description": "Value for the information"
                }
              }
            },
            "description": "Custom fields for the contact"
          },
          "memberships": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "group_id": {
                  "type": "string",
                  "description": "ID of the group"
                }
              }
            },
            "description": "Groups the contact belongs to"
          }
        }
      },
      "ContactBook": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the contact book"
          },
          "name": {
            "type": "string",
            "description": "Name of the contact book"
          },
          "organization_id": {
            "type": "string",
            "description": "ID of the organization if the contact book is shared"
          }
        }
      },
      "Conversation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the conversation"
          },
          "color": {
            "type": "string",
            "description": "Color code for the conversation"
          },
          "subject": {
            "type": "string",
            "description": "Subject of the conversation"
          },
          "users": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "User ID"
                },
                "name": {
                  "type": "string",
                  "description": "User name"
                },
                "email": {
                  "type": "string",
                  "description": "User email"
                }
              }
            },
            "description": "Users with access to the conversation"
          },
          "assignees": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "User ID"
                },
                "name": {
                  "type": "string",
                  "description": "User name"
                },
                "email": {
                  "type": "string",
                  "description": "User email"
                }
              }
            },
            "description": "Users assigned to the conversation"
          },
          "messages_count": {
            "type": "integer",
            "description": "Number of messages in the conversation"
          },
          "latest_message": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Message ID"
              },
              "subject": {
                "type": "string",
                "description": "Message subject"
              },
              "preview": {
                "type": "string",
                "description": "Message preview"
              },
              "delivered_at": {
                "type": "integer",
                "description": "Timestamp of message delivery"
              }
            },
            "description": "Latest message in the conversation"
          },
          "link": {
            "type": "string",
            "description": "URL to the conversation in Missive"
          }
        }
      },
      "Draft": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string",
            "description": "Subject of the draft"
          },
          "body": {
            "type": "string",
            "description": "HTML body of the draft"
          },
          "from": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Sender name"
              },
              "address": {
                "type": "string",
                "description": "Sender email address"
              }
            },
            "description": "Sender information"
          },
          "to": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Recipient name"
                },
                "address": {
                  "type": "string",
                  "description": "Recipient email address"
                }
              }
            },
            "description": "Recipients"
          },
          "cc": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "CC recipient name"
                },
                "address": {
                  "type": "string",
                  "description": "CC recipient email address"
                }
              }
            },
            "description": "CC recipients"
          },
          "bcc": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "BCC recipient name"
                },
                "address": {
                  "type": "string",
                  "description": "BCC recipient email address"
                }
              }
            },
            "description": "BCC recipients"
          },
          "references": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "References for threading"
          },
          "conversation": {
            "type": "string",
            "description": "ID of the conversation to create the draft in"
          },
          "team": {
            "type": "string",
            "description": "ID of the team to link the draft's conversation to"
          },
          "force_team": {
            "type": "boolean",
            "description": "Force a new team even if the conversation is already in another team"
          },
          "organization": {
            "type": "string",
            "description": "ID of the organization to scope the conversation to"
          },
          "add_users": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "User IDs to get access to the conversation"
          },
          "add_assignees": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "User IDs to assign to the conversation"
          },
          "schedule_for": {
            "type": "string",
            "format": "date-time",
            "description": "When to send the draft"
          }
        }
      },
      "Post": {
        "type": "object",
        "properties": {
          "html": {
            "type": "string",
            "description": "HTML content of the post"
          },
          "references": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "References for threading"
          },
          "conversation": {
            "type": "string",
            "description": "ID of the conversation to create the post in"
          },
          "team": {
            "type": "string",
            "description": "ID of the team to link the post's conversation to"
          },
          "force_team": {
            "type": "boolean",
            "description": "Force a new team even if the conversation is already in another team"
          },
          "organization": {
            "type": "string",
            "description": "ID of the organization to scope the conversation to"
          },
          "add_users": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "User IDs to get access to the conversation"
          },
          "add_assignees": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "User IDs to assign to the conversation"
          },
          "add_shared_labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Label IDs to add to the conversation"
          }
        }
      },
      "Organization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the organization"
          },
          "name": {
            "type": "string",
            "description": "Name of the organization"
          }
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/drafts": {
      "post": {
        "summary": "Create a new draft",
        "description": "Creates a new draft which can be sent later. If no reference is provided, the draft will be created in a new conversation.",
        "tags": ["Drafts"],
        "operationId": "createDraft",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "drafts": {
                    "$ref": "#/components/schemas/Draft"
                  }
                },
                "required": ["drafts"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Draft created successfully"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/posts": {
      "post": {
        "summary": "Create a new post",
        "description": "The posts endpoint lets you inject data in any Missive conversation. You can create posts in new conversations or append them to existing ones.",
        "tags": ["Posts"],
        "operationId": "createPost",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "posts": {
                    "$ref": "#/components/schemas/Post"
                  }
                },
                "required": ["posts"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Post created successfully"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/contacts": {
      "get": {
        "summary": "List contacts",
        "description": "List contacts the authenticated user has access to.",
        "tags": ["Contacts"],
        "operationId": "listContacts",
        "parameters": [
          {
            "name": "contact_book_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "ID of the contact book to list contacts from"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Search query"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100
            },
            "description": "Maximum number of contacts to return"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            },
            "description": "Offset for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "List of contacts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "contacts": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Contact"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new contact",
        "description": "Creates a new contact in a specified contact book.",
        "tags": ["Contacts"],
        "operationId": "createContact",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contacts": {
                    "$ref": "#/components/schemas/Contact"
                  }
                },
                "required": ["contacts"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Contact created successfully"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/{id}": {
      "get": {
        "summary": "Get a specific contact",
        "description": "Fetch a specific contact using the contact id.",
        "tags": ["Contacts"],
        "operationId": "getContact",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Contact ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Contact details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "contacts": {
                      "$ref": "#/components/schemas/Contact"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Contact not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a contact",
        "description": "Update a specific contact.",
        "tags": ["Contacts"],
        "operationId": "updateContact",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Contact ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contacts": {
                    "$ref": "#/components/schemas/Contact"
                  }
                },
                "required": ["contacts"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contact updated successfully"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Contact not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a contact",
        "description": "Delete a specific contact.",
        "tags": ["Contacts"],
        "operationId": "deleteContact",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Contact ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Contact deleted successfully"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Contact not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/contact_books": {
      "get": {
        "summary": "List contact books",
        "description": "List contact books the authenticated user has access to.",
        "tags": ["Contact Books"],
        "operationId": "listContactBooks",
        "responses": {
          "200": {
            "description": "List of contact books",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "contact_books": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ContactBook"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/conversations": {
      "get": {
        "summary": "List conversations",
        "description": "List conversations visible to the user who owns the API token.",
        "tags": ["Conversations"],
        "operationId": "listConversations",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100
            },
            "description": "Maximum number of conversations to return"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            },
            "description": "Offset for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "List of conversations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "conversations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Conversation"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/conversations/{id}": {
      "get": {
        "summary": "Get a specific conversation",
        "description": "Fetch a specific conversation using the conversation id.",
        "tags": ["Conversations"],
        "operationId": "getConversation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Conversation ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "conversations": {
                      "$ref": "#/components/schemas/Conversation"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Conversation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/organizations": {
      "get": {
        "summary": "List organizations",
        "description": "List organizations the authenticated user is part of.",
        "tags": ["Organizations"],
        "operationId": "listOrganizations",
        "responses": {
          "200": {
            "description": "List of organizations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "organizations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Organization"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  }
}